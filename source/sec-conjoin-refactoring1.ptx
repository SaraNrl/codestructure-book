<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-conjoin-refactoring1" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Code Refactoring</title>

  <activity>
    <statement>
      <p>
        You will see a copy of the following code block in an interactive mode than you can compile. We want you to improve the style of the code as an expert would view it. You must not change the code behavior. To ensure this you can run the code and check the test cases.
      </p>
      <program language="java">
        <input>
        public class DiscountChecker {
          public static String eligibleForDiscount(int age, int membershipYears) {
            if (age > 18) { 
              if (membershipYears >= 5) {
                return "Eligible";
              }	
            }  
            return "Not eligible";
          }
        }
        </input>
      </program>
    </statement>
    <hint>
      <p>
        Write some test cases for yourself to ensure the code functionality has not changed. 
      </p>
    </hint>
   
    <program label="conjoined-refactoring1" interactive="activecode" language="java" compiler-args="-g" linker-args="-s">
      <input>
        public class DiscountChecker {
          public static String eligibleForDiscount(int age, int membershipYears) {
            if (age > 18) { 
              if (membershipYears >= 5) {
                return "Eligible";
              }
            }  
            return "Not eligible";
          }
        }
      </input>

      <tests>
        import static org.junit.Assert.*;
        import org.junit.Test;
        import java.io.*;

        public class RunestoneTests extends CodeTestHelper {

          public RunestoneTests() {
              super("DiscountChecker");
          }

          // Test for Eligible case
          @Test
          public void testEligible() throws IOException {
              Object[] args = {20, 6};  // Arguments for the method
              String output = getMethodOutput("eligibleForDiscount", args);
              String expect = "Eligible";
              
              boolean passed = getResults(expect, output, "eligibleForDiscount(20, 6)");
              assertTrue(passed);
          }

          // Test for Not eligible due to age
          @Test
          public void testNotEligibleDueToAge() throws IOException {
              Object[] args = {17, 6};  // Arguments for the method
              String output = getMethodOutput("eligibleForDiscount", args);
              String expect = "Not eligible";
              
              boolean passed = getResults(expect, output, "eligibleForDiscount(17, 6)");
              assertTrue(passed);
          }

          // Test for Not eligible due to membership years
          @Test
          public void testNotEligibleDueToMembershipYears() throws IOException {
              Object[] args = {25, 3};  // Arguments for the method
              String output = getMethodOutput("eligibleForDiscount", args);
              String expect = "Not eligible";
              
              boolean passed = getResults(expect, output, "eligibleForDiscount(25, 3)");
              assertTrue(passed);
          }

          // Test for Not eligible due to both conditions
          @Test
          public void testNotEligibleForBoth() throws IOException {
              Object[] args = {16, 2};  // Arguments for the method
              String output = getMethodOutput("eligibleForDiscount", args);
              String expect = "Not eligible";
              
              boolean passed = getResults(expect, output, "eligibleForDiscount(16, 2)");
              assertTrue(passed);
          }
        }
      </tests>
    </program>
  </activity>
</section>
